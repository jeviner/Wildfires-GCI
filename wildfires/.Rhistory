names_weeks <- c("Weekend Stays", "Weekday Stays")
pie(totals, labels = piepercent, main = "Types of Stays",col = rainbow(length(totals)))
legend("topleft", c("Weekend Stays","Weekday Stays"), cex = 0.8,
fill = rainbow(length(totals)))
#About 27.4% of stays are weekend stays while 72.6% are weekday stays showing that weekdays stays
#are far more popular than weekend stays.
#Analyzing hotel type and deposit type
no_deposit_resort <- c(data_full$deposit_type=="No Deposit" & data_full$hotel=="Resort Hotel")
no_dep_resort_sum <- sum(no_deposit_resort)
refundable_resort <- c(data_full$deposit_type=="Refundable" & data_full$hotel=="Resort Hotel")
refund_resort_sum <- sum(refundable_resort)
non_refund_resort <- c(data_full$deposit_type=="Non Refund" & data_full$hotel=="Resort Hotel")
non_refund_resort_sum <- sum(non_refund_resort)
no_deposit_city <- c(data_full$deposit_type=="No Deposit" & data_full$hotel=="City Hotel")
no_dep_city_sum <- sum(no_deposit_city)
refundable_city <- c(data_full$deposit_type=="Refundable" & data_full$hotel=="City Hotel")
refund_city_sum <- sum(refundable_city)
non_refund_city <- c(data_full$deposit_type=="Non Refund" & data_full$hotel=="City Hotel")
non_refund_city_sum <- sum(non_refund_city)
bar_chart_hotel <- c(non_refund_city_sum, non_refund_resort_sum, refund_city_sum, refund_resort_sum,
no_dep_city_sum, no_dep_resort_sum)
bar_chart_hotel_labels <- c("Non Refund - City", "Non Refund - Resort","Refund - City", "Refund - Resort",
"No Deposit - City", "No Deposit - Resort")
barplot(bar_chart_hotel, names.arg=bar_chart_hotel_labels, xlab = "Hotel and Refund Type", ylab = "Quantity", col = "blue",
main = "Comparing Hotel and Refund Types", border = "black", ylim = c(0,20000))
#City hotels are most likely to offer no deposit. Both resorts and city hotels are very  unlikely to offer refunds.
#5==============================================================================
# =============================================================================
#   The pie chart illustrates that the main segment of the hotel
#   guests, 11995 guests or 41%, are from Portugal (PRT on the chart)
#==============================================================================
country_org <- unique(data_full$country)
all_org <- data.frame(table(data_full$country))
pie(all_org$Freq, labels = paste(all_org$Var1, all_org$Freq), col = rainbow(138), main = 'Country of Origin', radius = 1)
#6==============================================================================
#BB is the most popular meal type throughout all seasons, while HB's popularity increases during warmer seasons.
#===============================================================================
install.packages("ggplot2")
library(ggplot2)
data_full1 <- data_full
data_full1$arrival_date_month <- factor(data_full1$arrival_date_month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
ggplot(data = data_full1) +
geom_bar(mapping = aes(x = arrival_date_month, fill = meal))+
xlab("Month")
#7==============================================================================
library(corrplot)
cor_matrix <- cor(data_full[c(3,8,9,10,11,12,19,22,26,28,29,30)])
corrplot(cor_matrix, method = "number")
#8==============================================================================
cancellation_fee <- subset(data_full, is_canceled=="1")
no_show <- subset(cancellation_fee, reservation_status=="No-Show")
booking_less_than_7_prior <- subset(cancellation_fee, lead_time<=7)
booking_more_than_7_prior <- subset(cancellation_fee, lead_time >7)
#================================================================================
library(readxl)
hotel_data <- read_excel("Desktop/MGSC310/Ass1Data.csv.xlsx")
View(hotel_data)
data_types <- hotel_data[2,]
for (i in data_types)
print (class(i))
sum(is.na(data_raw))
data_raw[data_raw==""] <- NA
data_full <- na.omit(data_raw)
sum((is.na(data_full)))
#2==============================================================================
#In this data set there are 960s values missing.
#===============================================================================
data_raw <- hotel_data
sum(is.na(data_raw))
data_raw[data_raw==""] <- NA
data_full <- na.omit(data_raw)
sum((is.na(data_full)))
mean_adr <- mean(data_full$adr)
mean_lead <- mean(data_full$lead_time)
mean_weekend <- mean(data_full$stays_in_weekend_nights)
mean_week <- mean(data_full$stays_in_week_nights)
mean_adults <- mean(data_full$adults)
mean_child <- mean(data_full$children)
mean_babies <- mean(data_full$babies)
mean_not_canceled <- mean(data_full$previous_bookings_not_canceled)
mean_booking <- mean(data_full$booking_changes)
mean_waiting_list <- mean(data_full$days_in_waiting_list)
mean_parking <- mean(data_full$required_car_parking_spaces)
mean_requests <- mean(data_full$total_of_special_requests)
std_adr <- sd(data_full$adr)
std_lead <- sd(data_full$lead_time)
std_weekend <- sd(data_full$stays_in_weekend_nights)
std_week <- sd(data_full$stays_in_week_nights)
std_adults <- sd(data_full$adults)
std_children <- sd(data_full$children)
std_babies <- sd(data_full$babies)
std_not_canceled <- sd(data_full$previous_bookings_not_canceled)
std_booking <- sd(data_full$booking_changes)
std_waiting_list <- sd(data_full$days_in_waiting_list)
std_parking <- sd(data_full$required_car_parking_spaces)
std_requests <- sd(data_full$total_of_special_requests)
names_variables <- c("# of adults", "# of babies", "Book changes", "# of kids", "adr",
"Lead time", "Prev. not canc.", "Car space", "# of requests", "WL days",
"WN stays", "WE stays")
bar_chart_mean <- c(mean_adults, mean_babies, mean_booking, mean_child, mean_adr, mean_lead,
mean_not_canceled, mean_parking, mean_requests, mean_waiting_list, mean_week,
mean_weekend)
barplot(bar_chart_mean, names.arg=names_variables, xlab = "Variable", ylab = "Quantity", col = "red",
main = "Mean Quantity Bar Chart", border = "black", ylim = c(0,150))
bar_chart_std <- c(std_adults, std_babies, std_booking, std_children, mean_adr, std_lead,
std_not_canceled, std_parking, std_requests, std_waiting_list, std_week,
std_weekend)
barplot(bar_chart_std, names.arg=names_variables, xlab = "Variable", ylab = "Quantity", col = "blue",
main = "Standard Deviation Quanity Bar Chart", border = "black", ylim = c(0,150))
piepercent <- round(100*totals/sum(totals), 1)
totals <- c(weekend_sum, weekday_sum)
weekend_sum <- sum(data_full$stays_in_weekend_nights)
weekday_sum <- sum(data_full$stays_in_week_nights)
names_weeks <- c("Weekend Stays", "Weekday Stays")
pie(totals, labels = piepercent, main = "Types of Stays",col = rainbow(length(totals)))
legend("topleft", c("Weekend Stays","Weekday Stays"), cex = 0.8,
fill = rainbow(length(totals)))
weekend_sum <- sum(data_full$stays_in_weekend_nights)
weekday_sum <- sum(data_full$stays_in_week_nights)
names_weeks <- c("Weekend Stays", "Weekday Stays")
piepercent <- round(100*totals/sum(totals), 1)
totals <- c(weekend_sum, weekday_sum)
pie(totals, labels = piepercent, main = "Types of Stays",col = rainbow(length(totals)))
legend("topleft", c("Weekend Stays","Weekday Stays"), cex = 0.8,
fill = rainbow(length(totals)))
install.packages("ggplot2")
library(ggplot2)
data_full1 <- data_full
data_full1$arrival_date_month <- factor(data_full1$arrival_date_month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
ggplot(data = data_full1) +
geom_bar(mapping = aes(x = arrival_date_month, fill = meal))+
xlab("Month")
library(corrplot)
cor_matrix <- cor(data_full[c(3,8,9,10,11,12,19,22,26,28,29,30)])
corrplot(cor_matrix, method = "color")
print(data_types)
cancellation_fee <- subset(data_full, is_canceled=="1")
no_show <- subset(cancellation_fee, reservation_status=="No-Show")
booking_less_than_7_prior <- subset(cancellation_fee, lead_time<=7)
booking_more_than_7_prior <- subset(cancellation_fee, lead_time >7)
cor_matrix <- cor(data_full[c(3,8,9,10,11,12,19,22,26,28,29,30)])
corrplot(cor_matrix, method = "number")
data_full1 <- data_full
data_full1$arrival_date_month <- factor(data_full1$arrival_date_month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
ggplot(data = data_full1) +
geom_bar(mapping = aes(x = arrival_date_month, fill = meal))+
xlab("Month")
install.packages("ggplot2")
library(ggplot2)
data_full1 <- data_full
data_full1$arrival_date_month <- factor(data_full1$arrival_date_month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
ggplot(data = data_full1) +
geom_bar(mapping = aes(x = arrival_date_month, fill = meal))+
xlab("Month")
install.packages("ggplot2")
data_types %in% c("integer","numeric")
data_types
data_types_r1 <- data1[1,]
data_types <- c()
for (i in data_types_r1)
#print(class(i))
data_types <- append(data_types,class(i),)
print(data_types)
#1============================================================
#vector data_types describes the datatypes of the variables in data1
data_types_r1 <- data1[1,]
#1============================================================
#vector data_types describes the datatypes of the variables in data1
data1 <- data_full
data_types_r1 <- data1[1,]
data_types <- c()
for (i in data_types_r1)
#print(class(i))
data_types <- append(data_types,class(i),)
print(data_types)
data_types %in% c("integer","numeric")
dataset_num <- hotel_data[,data_types %in% c("integer","numeric") ]
dataset_str <- hotel_data[,!data_types %in% c("integer","numeric") ]
data_new <- hotel_data
apply(data_new,1,mean)
apply(data_new,2,mean)
apply(dataset_num,2,mean)
apply(dataset_num,2,FUN = mean)
View(dataset_num)
apply(dataset_num,2, FUN = mean)
boxplot(hotel_data$babies)
summary(dataset_num)
data_full1 <- data_full
data_full1$arrival_date_month <- factor(data_full1$arrival_date_month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
ggplot(data = data_full1) +
geom_bar(mapping = aes(x = arrival_date_month, fill = meal))+
xlab("Month")
rm(list = ls())
sales <- rnorm(n = 50,mean = 100,sd = .5)
plot(sales, type = 'l', main = 'daily sales', col = 'orange')
sales <- rnorm(50,mean = 100,sd = .5)
plot(sales, type = 'l', main = 'daily sales', col = 'orange')
#Generate dataset ------------------------------------
set.seed(1234)
sales <- rnorm(50,mean = 100,sd = .5)
set.seed(1234)
sales <- rnorm(50,mean = 100,sd = .5)
plot(sales, type = 'l', main = 'daily sales', col = 'orange')
sales
week1 <- sales[1:7]
week1
sum(week1)
sums <- c()
j = 7
weekly_sales <- seq(from=1, to=50,by=7)
library(rmsfuns)
#batch install packages needed
pkgs <- c("dbplyr","dplyr","ggmap","sf","cowplot","here","devtools",
"rgeos","raster","mapview","leaflet",
"leaflet.extras","htmltools","RSQLite","purr","ggplot2","ggthemes",
"xts","ggfortify","maps","mapdata","datasets")
# Load packages
load_pkg(pkgs)
install.packages("RSQLite")
install.packages("RSQLite")
#on my R, I had to update or install DBI package too, otherwise RSQLite wouldn't work
install.packages("DBI")
install.packages("DBI")
#load the libraries we need for this actual task
library(RSQLite)
library(dbplyr)
library(dplyr)
library(purrr)
library(ggplot2)
library(xts)
library(ggfortify)
library(ggthemes)
library(maps)
library(mapdata)
library(leaflet)
library(datasets)
setwd("/Users/jessicaviner/Desktop/wildfires/")
fires<-read.csv("Wildfires(2).csv")
#Let's start looking at the data
glimpse (fires)
head(fires)
summary(fires)
View(fires)
CA_fires<- filter(fires,STATE == "CA")
View(CA_fires)
summary(fires)
head(CA_fires)
data_types <- sapply(CA_fires, class)
data_types
library(DBI)
sum_nas = sum(is.na(data_raw))
sum_nas
sum_nas = sum(is.na(data_raw))
sum_nas = sum(is.na(CA_fires))
sum_nas
for (i in 1:41)
{
print(colnames(CA_fires[i]))
print(sum(is.na(CA_fires[,i])))
}
CA_fires_cleaner = select(CA_fires, -c(SOURCE_REPORTING_UNIT_NAME, LOCAL_INCIDENT_ID, FIRE_CODE, FIRE_NAME, ICS_209_INCIDENT_NUMBER, ICS_209_NAME, MTBS_ID, MTBS_FIRE_NAME, COMPLEX_NAME, DISCOVERY_TIME))
#data manipulation
library(dplyr)
#data visualization
library(corrplot)
library(ggplot2)
library(GGally)
library(reshape)
library(stringr)
library(caret)
library(ISLR) #Data for an Introduction to Statistical Learning
library(leaps)
library(VIM)
library(bnstruct)
#load packages
pkgs <- c("tidyverse","rgdal","ggmap","sf","cowplot","here","ggplot2",
"knitr","ggrepel","magrittr","lubridate","sp","geosphere","ggalt",
"rgeos","FedData","raster","mapview","dbscan","SDMtools","grid","gtable",
"gridextra","maptools","ncf","pgirmess","proj4","rnaturalearth","rnaturalearthdata","shadowtext","leaflet",
"leaflet.extras","htmltools","RColorBrewer","leaflet")
# Install and load all CRAN packages provided from a character vector
load_pkgs = function(pkgs) {
new_pkgs = pkgs[!(pkgs %in% installed.packages()[ ,'Package'])]
if (length(new_pkgs) > 0) install.packages(new_pkgs,repos = "http://cran.cnr.berkeley.edu/")
invisible(lapply(pkgs,function(x)
suppressPackageStartupMessages(library(x,character.only = T))))
}
# Load packages
load_pkgs(pkgs)
#load packages
pkgs <- c("tidyverse","rgdal","ggmap","sf","cowplot","here","ggplot2",
"knitr","ggrepel","magrittr","lubridate","sp","geosphere","ggalt",
"rgeos","FedData","raster","mapview","dbscan","SDMtools","grid","gtable",
"gridextra","maptools","ncf","pgirmess","proj4","rnaturalearth","rnaturalearthdata","shadowtext","leaflet",
"leaflet.extras","htmltools","RColorBrewer","leaflet")
# Install and load all CRAN packages provided from a character vector
load_pkgs = function(pkgs) {
new_pkgs = pkgs[!(pkgs %in% installed.packages()[ ,'Package'])]
if (length(new_pkgs) > 0) install.packages(new_pkgs,repos = "http://cran.cnr.berkeley.edu/")
invisible(lapply(pkgs,function(x)
suppressPackageStartupMessages(library(x,character.only = T))))
}
# Load packages
load_pkgs(pkgs)
pkgs <- c("tidyverse","rgdal","ggmap","sf","cowplot","here","ggplot2",
"knitr","ggrepel","magrittr","lubridate","sp","geosphere","ggalt",
"rgeos","FedData","raster","mapview","dbscan","SDMtools","grid","gtable",
"gridextra","maptools","ncf","pgirmess","proj4","rnaturalearth","rnaturalearthdata","shadowtext","leaflet",
"leaflet.extras","htmltools","RColorBrewer","leaflet")
install.packages(pkgs)
install.packages(pkgs)
library(tidyverse)
library(rgdal)
library(sf)
library(ggrepel)
library(ggplot2)
library(ggmap)
library(knitr)
library(magrittr)
library(lubridate)
library(sp)
library(geosphere)
library(ggalt)
library(dbscan)
library(SDMTools)
library(rgeos)
library(grid)
library(gtable)
library(gridExtra)
library(maptools)
library(ncf)
library(pgirmess)
library(proj4)
library(RColorBrewer)
library(leaflet)
#set our directory
setwd("/Users/jessicaviner/Desktop/wildfires/USDA_veg/")
#import the shape file
Veg_data <- st_read("S_USA.PNV_2000Sections.shp")
#ok, let's look and see what's in here
head(Veg_data, n=4)
#set our directory
setwd("/Users/jessicaviner/Desktop/wildfires/USDA_veg/")
#set our directory
setwd("/Users/jessicaviner/Desktop/wildfires/S_USA/")
#import the shape file
Veg_data <- st_read("S_USA.PNV_2000Sections.shp")
#ok, let's look and see what's in here
head(Veg_data, n=4)
View(Veg_data)
#Review geometry type
st_geometry_type(Veg_data)
#what CRS is it in?
st_crs(Veg_data)
#What are the boundaries of this shape file?
st_bbox(Veg_data)
#ok let's plot this crap
ggplot()+geom_sf(data=Veg_data, size=0.01)+theme_bw()
CA.bbox <- data.frame( long=c(-122.084, -115.997, -115.997, -122.084, -122.084),
lat =c( 32.822, 32.822, 37.677, 37.677, 32.822))
crsLongLat <- "+proj=longlat +datum=WGS84 +no_defs"
crsLAEA <- "+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9996 +x_0=520000 +y_0=-4480000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
CA.bbox.sf <- st_sfc(st_polygon(list(as.matrix(CA.bbox[,c("long","lat")]))), crs=crsLongLat)
laeabb <- st_transform(CA.bbox.sf, crs = crsLAEA)
b <- st_bbox(laeabb)
b
#look at layers of interest
ggplot()+geom_sf(data=Veg_data, size=0.01, aes(fill=WATER_PCT))+theme_bw()+
coord_sf(crs = crsLAEA, xlim = c(b["xmin"], b["xmax"]), ylim = c(b["ymin"], b["ymax"]))
shiny::runApp('~/Desktop/SCI100/WildfiresApp')
view(faithful)
summary(faithful)
summary(CA_fires$FIRE_YEAR)
runApp('~/Desktop/SCI100/WildfiresApp')
count(CA_fires$FIRE_YEAR)
unique(CA_fires$FIRE_YEAR)
runApp('~/Desktop/SCI100/WildfiresApp')
install.packages("dismo")
#load libraries
library(dismo)
library(maptools)
#load files we will need
file <- paste0(system.file(package="dismo"), "/ex/bradypus.csv")
#read in table form the file
bradypus <- read.table(file,  header=TRUE,  sep=",")
bradypus <- bradypus[,2:3]
acaule <- gbif("solanum", "acaule*", geo=FALSE)
colnames(acaule)
#remove NA values
acgeo <- subset(acaule, !is.na(lon) & !is.na(lat))
#map out the species data
data(wrld_simpl)
plot(wrld_simpl, xlim=c(-80,70), ylim=c(-60,10), axes=TRUE, col="light yellow")
# restore the box around the map
box()
# add the points
points(acgeo$lon, acgeo$lat, col='red', cex=0.75)
#Load Environmental data
path <- file.path(system.file(package="dismo"), 'ex')
files <- list.files(path, pattern='grd$', full.names=TRUE )
files
predictors <- stack(files)
predictors
names(predictors)
plot(predictors)
#focus on one map
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(bradypus, col='blue')
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(acgeo$lon, acgeo$lat, col='blue')
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(acgeo$lon, acgeo$lat, col='blue')
#focus on one map
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(bradypus, col='blue')
data(wrld_simpl)
plot(wrld_simpl, xlim=c(-80,70), ylim=c(-60,10), axes=TRUE, col="light yellow")
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(acgeo$lon, acgeo$lat, col='blue')
#learning how to do SDM model with Wesley, Jessica, Liz, on April 29th
# using an R tutorial on plant data
rm(list = ls())
par(mfrow = c(1,1))
setwd("/Users/jessicaviner/Desktop/wildfires")
#load libraries
library(dismo)
library(maptools)
#load files we will need
file <- paste0(system.file(package="dismo"), "/ex/bradypus.csv")
# this is the file we will use:
#read in table form the file
bradypus <- read.table(file,  header=TRUE,  sep=",")
bradypus <- bradypus[,2:3]
acaule <- gbif("solanum", "acaule*", geo=FALSE)
colnames(acaule)
#remove NA values
acgeo <- subset(acaule, !is.na(lon) & !is.na(lat))
#map out the species data
data(wrld_simpl)
plot(wrld_simpl, xlim=c(-80,70), ylim=c(-60,10), axes=TRUE, col="light yellow")
# restore the box around the map
box()
# add the points
points(acgeo$lon, acgeo$lat, col='red', cex=0.75)
#Load Environmental data
path <- file.path(system.file(package="dismo"), 'ex')
files <- list.files(path, pattern='grd$', full.names=TRUE )
files
predictors <- stack(files)
predictors
names(predictors)
plot(predictors)
### let's overlay the point data now.
#focus on one map
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(bradypus, col='blue')
#or
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(acgeo$lon, acgeo$lat, col='blue')
#extracting data from the model
presval <- raster::extract(predictors, bradypus)
backgr <- randomPoints(predictors, 500)
absvals <- raster::extract(predictors, backgr)
pb <- c(rep(1, nrow(presval)), rep(0, nrow(absvals)))
sdmdata <- data.frame(cbind(pb, rbind(presval, absvals)))
sdmdata[, "biome"] = as.factor(sdmdata[, "biome"])
head(sdmdata)
pairs(sdmdata[,2:5], cex = 0.1)
#save
saveRDS(sdmdata, "sdm.Rds")
saveRDS(presval, "pvals.Rds")
#modelling
m1 = glm(pb ~bio1 + bio5 + bio12, data = sdmdata)
class(m1)
bc <- bioclim(presval[, c('bio1', 'bio5', 'bio12')])
class(bc)
#arbitrary scenarios
bio1 = c(40, 150, 200)
bio5 = c(60, 115, 290)
bio12 = c(600, 1600, 1700)
pd = data.frame(cbind(bio1, bio5, bio12))
predict(m1, pd)
response(bc)
#making a predictive map
predictors <- stack(list.files(file.path(system.file(package="dismo"), 'ex'), pattern = 'grds', full.names = TRUE))
names(predictors)
p <- predict(predictors, m1)
plot(p)
#making a predictive map
predictors <- stack(list.files(file.path(system.file(package="dismo"), 'ex'), pattern = 'grds', full.names = TRUE))
names(predictors)
p <- predict(predictors, m1)
plot(p)
